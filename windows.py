from datetime import datetime, time, date

from functools import cmp_to_key

import aiogram.types.message
from aiogram.types import CallbackQuery

from config import *
from aiogram import Dispatcher, Bot, F
from aiogram import types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import ContentType, Message
from aiogram_dialog.widgets.kbd import *
from aiogram_dialog.widgets.text import *
from aiogram_dialog.widgets.input import *
from aiogram_dialog import Dialog, DialogManager, Window
from aiogram.fsm.context import FSMContext
from aiogram_dialog import DialogManager, StartMode, ShowMode

from states import States
from random import randint
from typing import Any
from database import *
from worksheet_updater import Updater

db = Database("users.db")
upd = Updater("telesolve.json", "users.db")

MAIN_MENU_BTN = SwitchTo(Const("–ú–µ–Ω—é"), id="mainb", state=States.main_menu)
CANCEL_EDIT = SwitchTo(Const("–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"), when=F["dialog_data"]["finished"], id="cnl_edt",
                       state=States.preview, )


def compare(a: Task, b: Task):
    if a == b:
        return 0
    if a.approved > b.approved:
        return -1
    if a.approved < b.approved:
        return 1
    if a.mark > 0 and b.mark > 0:
        return -1 if a.task_id < b.task_id else 1
    if a.mark > 0 >= b.mark:
        return 1
    if a.mark <= 0 < b.mark:
        return -1
    if a.mark == 0 and b.mark == -1:
        return 1
    if a.mark == -1 and b.mark == 0:
        return -1

    date1 = datetime.strptime(a.deadline, '%Y-%m-%d %H:%M')
    date2 = datetime.strptime(b.deadline, '%Y-%m-%d %H:%M')
    return -1 if date1 < date2 else 1


async def get_user_tasks(state: FSMContext, dialog_manager: DialogManager, **kwargs):
    tasks = db.get_tasks(dialog_manager.dialog_data["user_id"])
    tasks.sort(key=cmp_to_key(compare))
    return {'tasks': tasks}


async def get_tests_data(state: FSMContext, dialog_manager: DialogManager, **kwargs):
    tests = db.get_test_list()
    return {'tests': tests}


def check_time(tm):
    try:
        time.fromisoformat(tm)
        return True
    except ValueError:
        return False


async def get_order_data(dialog_manager: DialogManager, **kwargs):
    dialog_manager.dialog_data["finished"] = True
    deadline: date = dialog_manager.dialog_data["date"]

    data = dict()
    data["selected_type"] = str(db.get_test(dialog_manager.dialog_data["chosen_option"]))
    data["name"] = dialog_manager.find("write_name").get_value()
    data["description"] = db.get_test(dialog_manager.dialog_data["chosen_option"]).description
    tm = dialog_manager.find("write_deadline_time").get_value()
    if len(tm.split(":")[0]) < 2:
        tm = "0" + tm

    if check_time(tm):
        data["date"] = deadline.strftime('%Y-%m-%d') + " " + dialog_manager.find("write_deadline_time").get_value()
        dialog_manager.dialog_data["correct"] = True
    else:
        data["date"] = "–ò—Å–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è –¥–µ–¥–ª–∞–π–Ω–∞ ‚ùå"
        dialog_manager.dialog_data["correct"] = False

    data["cost"] = db.get_test(dialog_manager.dialog_data["chosen_option"]).cost

    return data


async def on_option_selected(callback: CallbackQuery, widget: Any, manager: DialogManager, item_id: str):
    now = datetime.now().time()
    start, end = db.get_time_deltas()

    if start <= now <= end:
        manager.dialog_data["chosen_option"] = int(item_id.split()[1])
        await manager.switch_to(States.write_name)
    else:
        await manager.close_manager()
        await manager.start(States.after_restart)
        await callback.message.answer("–ú—ã —Å–µ–π—á–∞—Å –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ–º –∑–∞–∫–∞–∑—ã üôÅ, –≤–≤–µ–¥–∏—Ç–µ /menu")
        await manager.switch_to(States.after_restart)


async def on_date_click(callback: CallbackQuery, widget, dialog_manager: DialogManager, selected_date: date):
    dialog_manager.dialog_data["date"] = selected_date
    if selected_date >= date.today():
        await next_or_end(0, 0, dialog_manager)


async def next_or_end(event, widget, dialog_manager: DialogManager, *_):
    if dialog_manager.dialog_data.get("finished"):
        await dialog_manager.switch_to(States.preview)
    else:
        await dialog_manager.next()


async def confirm_purchase(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    dialog_manager.dialog_data["finished"] = False
    data = await get_order_data(dialog_manager)
    dialog_manager.dialog_data["id"] = gen_id()

    if not db.user_exists(callback.message.chat.id):
        db.add_user(User(callback.message.chat.id, data["name"]))

    await dialog_manager.switch_to(States.pay)


async def write_login(message: Message, widget, dialog_manager: DialogManager, *_):
    await dialog_manager.switch_to(States.write_password)


async def add_task(message: Message, widget, dialog_manager: DialogManager, *_):
    data = await get_order_data(dialog_manager)
    db.add_task(Task(
        type_id=dialog_manager.dialog_data["chosen_option"],
        task_id=dialog_manager.dialog_data["id"],
        user_id=message.chat.id,
        test_name=db.get_test(dialog_manager.dialog_data["chosen_option"]).description,
        login_data=dialog_manager.find("write_login").get_value() + " " + dialog_manager.find(
            "write_password").get_value(),
        deadline=data["date"],
        mark=-1,
        user_name=data["name"],
        approved=2
    ))

    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve {dialog_manager.dialog_data['id']}"))
    builder.add(
        types.InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline {dialog_manager.dialog_data['id']}"))
    await message.bot.send_document(MANAGER_ID, dialog_manager.dialog_data["file_id"], caption=
    f"–ó–∞–∫–∞–∑ –æ—Ç {data['name']} \"{data['description']}\" –∑–∞ {data['cost']}‚ÇΩ\n", reply_markup=builder.as_markup())

    await message.answer("‚ù§–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –í–∞—Å –∑–∞ –ø–æ–∫—É–ø–∫—É‚ù§Ô∏è\n\n‚úçüèº–¢–µ—Å—Ç –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–æ –∫–æ–Ω—Ü–∞ –¥–µ–¥–ª–∞–π–Ω–∞‚úçüèº")
    await dialog_manager.switch_to(States.main_menu)

    if len(db.get_all_tasks()) % 5 == 0:
        upd.update_tasks_list()


async def receipt_handler(message: Message, message_input: MessageInput, manager: DialogManager):
    data = await get_order_data(manager)
    manager.dialog_data["file_id"] = message.document.file_id
    await manager.switch_to(States.write_login)


async def decline_purchase(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    dialog_manager.dialog_data["finished"] = False
    await dialog_manager.switch_to(States.main_menu)


async def go_to_menu(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    dialog_manager.dialog_data["user_id"] = callback.message.chat.id


async def open_menu(callback: CallbackQuery, widget: Any, manager: DialogManager):
    now = datetime.now().time()
    start, end = db.get_time_deltas()

    if start <= now <= end:
        await manager.switch_to(States.buy_menu)
    else:
        await callback.message.answer("–ú—ã —Å–µ–π—á–∞—Å –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ–º –∑–∞–∫–∞–∑—ã üôÅ, –≤–≤–µ–¥–∏—Ç–µ /menu")
        await manager.switch_to(States.after_restart)

dialog = Dialog(
    Window(
        Const("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é"),
        SwitchTo(Const("–ú–µ–Ω—é"), id="menu", on_click=go_to_menu, state=States.main_menu),
        state=States.after_restart
    ),

    Window(
        Const("–ú–µ–Ω—é"),
        Button(Const("üíé –ó–∞–∫–∞–∑–∞—Ç—å —Ç–µ—Å—Ç üíé"), id="buy", on_click=open_menu),
        SwitchTo(Const("‚è≥ –ú–æ–∏ –∑–∞–∫–∞–∑—ã ‚è≥"), id="tasks", state=States.tasks_menu),
        Url(Const("‚úèÔ∏è –ú–µ–Ω–µ–¥–∂–µ—Ä ‚úèÔ∏è"), Const('https://t.me/MANAGER_MTTS')),
        Url(Const("üìïÔ∏è –ö–∞–Ω–∞–ª üìïÔ∏è"), Const('https://t.me/MGMSU_TestTech_Squad')),
        state=States.main_menu
    ),
    Window(
        Const("–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç–µ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Ä–µ—à–∏—Ç—å üìù\n"
              "–í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –≤–∞—à–µ–≥–æ —Ç–µ—Å—Ç–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ - –Ω–∞–ø–∏—à–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É –¥–ª—è –µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è üîé"),
        ScrollingGroup(
            Select(
                Format("{item.description} - {item.cost}‚ÇΩ"),
                item_id_getter=lambda test: f"test {test.test_id}",
                items="tests",
                id="tests",
                on_click=on_option_selected
            ),
            id="tests_group",
            width=1,
            height=10,
        ),
        MAIN_MENU_BTN,
        CANCEL_EDIT,
        getter=get_tests_data,
        state=States.buy_menu,
    ),
    Window(
        Const("–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –í–∞—à–∏–º–∏ –∑–∞–∫–∞–∑–∞–º–∏ üóí"),
        ScrollingGroup(
            Select(
                Format("{item.as_str}"),
                item_id_getter=lambda task: f"task {task.task_id}",
                items="tasks",
                id="tasks",
            ),
            id="tasks_group",
            width=1,
            height=6,
        ),
        MAIN_MENU_BTN,
        getter=get_user_tasks,
        state=States.tasks_menu
    ),
    Window(
        Const("–í–≤–µ–¥–∏—Ç–µ –§–ò–û"),
        TextInput(id="write_name", on_success=next_or_end),
        CANCEL_EDIT,
        state=States.write_name
    ),
    Window(
        Const("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–µ–¥–ª–∞–π–Ω–∞"),
        Calendar(id="write_deadline", on_click=on_date_click),
        CANCEL_EDIT,
        state=States.write_deadline
    ),
    Window(
        Const("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–µ–¥–ª–∞–π–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á–∞—Å:–º–∏–Ω—É—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä \"16:30\" –∏–ª–∏ \"09:30\" (–ú–°–ö)"),
        TextInput(id="write_deadline_time", on_success=next_or_end),
        CANCEL_EDIT,
        state=States.write_deadline_time
    ),
    Window(
        Jinja(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
            "<b>–í—ã–±—Ä–∞–Ω–Ω–∞—è –æ–ø—Ü–∏—è</b>: {{selected_type}}\n"
            "<b>–§–∏–æ</b>: {{name}}\n"
            "<b>–î–µ–¥–ª–∞–π–Ω</b>: {{date}}\n"
        ),
        SwitchTo(Const("–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø—Ü–∏—é"), state=States.buy_menu, id="to_buy_menu"),
        SwitchTo(Const("–ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û"), state=States.write_name, id="to_name"),
        SwitchTo(Const("–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –¥–µ–¥–ª–∞–π–Ω–∞"), state=States.write_deadline, id="to_deadline"),
        SwitchTo(Const("–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –¥–µ–¥–ª–∞–π–Ω–∞"), state=States.write_deadline_time, id="to_deadline_time"),
        Button(Const("–û–ø–ª–∞—Ç–∏—Ç—å ‚úÖ"), on_click=confirm_purchase, id="confirm_purchase", when=F["dialog_data"]["correct"]),
        Button(Const("–û—Ç–º–µ–Ω–∞ ‚ùå"), on_click=decline_purchase, id="decline_purchase"),
        getter=get_order_data,
        state=States.preview,
        parse_mode="html",
    ),
    Window(
        Jinja(
            "–ö –æ–ø–ª–∞—Ç–µ <b>{{cost}}‚ÇΩ</b>\n"
            "üßæ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å–≥–∏ –Ω–∞ **** –∏ <b>–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª–æ–º</b> —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ üßæ\n\n"
            "üë©üèª‚Äçüíº –ó–∞–∫–∞–∑ –±—É–¥–µ—Ç –∂–¥–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–¥–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ üë©üèª‚Äçüíº\n\n"
            "üîî –ö–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω –±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –í–∞–º –ø—Ä–∏–π–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ üîî\n\n"
            "‚åõÔ∏è –ï—Å–ª–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ n —á–∞—Å–æ–≤ –Ω–µ –±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ <a href=\"https://t.me/MANAGER_MTTS\">–º–µ–Ω–µ–¥–∂–µ—Ä—É</a> ‚åõÔ∏è"
        ),
        MessageInput(receipt_handler, content_types=[ContentType.DOCUMENT]),
        getter=get_order_data,
        state=States.pay,
        parse_mode="html",
    ),
    Window(
        Const("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω üë®‚Äçüíª"),
        TextInput(id="write_login", on_success=write_login),
        state=States.write_login
    ),
    Window(
        Const("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å üîë"),
        TextInput(id="write_password", on_success=add_task),
        state=States.write_password
    )
)
